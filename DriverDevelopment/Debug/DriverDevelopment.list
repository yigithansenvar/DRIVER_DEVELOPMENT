
DriverDevelopment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000660  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800080c  08000814  00010814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800080c  0800080c  00010814  2**0
                  CONTENTS
  4 .ARM          00000000  0800080c  0800080c  00010814  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800080c  08000814  00010814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800080c  0800080c  0001080c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000810  08000810  00010810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010814  2**0
                  CONTENTS
 10 .bss          00000078  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010814  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001aea  00000000  00000000  00010844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000671  00000000  00000000  0001232e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  000129a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000160  00000000  00000000  00012b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002a96  00000000  00000000  00012ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002353  00000000  00000000  00015736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009f47  00000000  00000000  00017a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000219d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000550  00000000  00000000  00021a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080007f4 	.word	0x080007f4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080007f4 	.word	0x080007f4

080001ec <EXTI_LineConfig>:
 * @param  EXTI_LineSource = PinNumber & Line Numbers @def_group EXTI_Line_Values
 *
 * @retval Void
 */
void EXTI_LineConfig(uint8_t PortSource, uint8_t EXTI_LineSource)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	460a      	mov	r2, r1
 80001f6:	71fb      	strb	r3, [r7, #7]
 80001f8:	4613      	mov	r3, r2
 80001fa:	71bb      	strb	r3, [r7, #6]
	uint32_t tempValue;

	tempValue = SYSCFG->EXTI_CR[EXTI_LineSource >> 2U];
 80001fc:	4a14      	ldr	r2, [pc, #80]	; (8000250 <EXTI_LineConfig+0x64>)
 80001fe:	79bb      	ldrb	r3, [r7, #6]
 8000200:	089b      	lsrs	r3, r3, #2
 8000202:	b2db      	uxtb	r3, r3
 8000204:	3302      	adds	r3, #2
 8000206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800020a:	60fb      	str	r3, [r7, #12]

	tempValue &= ~(0xFU << (EXTI_LineSource & 0x3U)* 4);
 800020c:	79bb      	ldrb	r3, [r7, #6]
 800020e:	f003 0303 	and.w	r3, r3, #3
 8000212:	009b      	lsls	r3, r3, #2
 8000214:	220f      	movs	r2, #15
 8000216:	fa02 f303 	lsl.w	r3, r2, r3
 800021a:	43db      	mvns	r3, r3
 800021c:	68fa      	ldr	r2, [r7, #12]
 800021e:	4013      	ands	r3, r2
 8000220:	60fb      	str	r3, [r7, #12]

	tempValue = (PortSource << (EXTI_LineSource & 0x3U)* 4);
 8000222:	79fa      	ldrb	r2, [r7, #7]
 8000224:	79bb      	ldrb	r3, [r7, #6]
 8000226:	f003 0303 	and.w	r3, r3, #3
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	fa02 f303 	lsl.w	r3, r2, r3
 8000230:	60fb      	str	r3, [r7, #12]

	SYSCFG->EXTI_CR[EXTI_LineSource >> 2U] = tempValue;
 8000232:	4907      	ldr	r1, [pc, #28]	; (8000250 <EXTI_LineConfig+0x64>)
 8000234:	79bb      	ldrb	r3, [r7, #6]
 8000236:	089b      	lsrs	r3, r3, #2
 8000238:	b2db      	uxtb	r3, r3
 800023a:	3302      	adds	r3, #2
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000242:	bf00      	nop
 8000244:	3714      	adds	r7, #20
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40013800 	.word	0x40013800

08000254 <EXTI_Init>:
 * @param EXTI_InitStruct = User Config structure
 *
 * @retval Void
 */
void EXTI_Init(EXTI_InitTypeDef_t *EXTI_InitStruct)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	uint32_t tempValue =0;
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]

	tempValue = (uint32_t)EXTI_BASE_ADDR;
 8000260:	4b44      	ldr	r3, [pc, #272]	; (8000374 <EXTI_Init+0x120>)
 8000262:	60fb      	str	r3, [r7, #12]

	EXTI->IMR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000264:	4b43      	ldr	r3, [pc, #268]	; (8000374 <EXTI_Init+0x120>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	4619      	mov	r1, r3
 800026e:	2301      	movs	r3, #1
 8000270:	408b      	lsls	r3, r1
 8000272:	43db      	mvns	r3, r3
 8000274:	493f      	ldr	r1, [pc, #252]	; (8000374 <EXTI_Init+0x120>)
 8000276:	4013      	ands	r3, r2
 8000278:	600b      	str	r3, [r1, #0]

	EXTI->EMR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 800027a:	4b3e      	ldr	r3, [pc, #248]	; (8000374 <EXTI_Init+0x120>)
 800027c:	685a      	ldr	r2, [r3, #4]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	4619      	mov	r1, r3
 8000284:	2301      	movs	r3, #1
 8000286:	408b      	lsls	r3, r1
 8000288:	43db      	mvns	r3, r3
 800028a:	493a      	ldr	r1, [pc, #232]	; (8000374 <EXTI_Init+0x120>)
 800028c:	4013      	ands	r3, r2
 800028e:	604b      	str	r3, [r1, #4]

	if(EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	78db      	ldrb	r3, [r3, #3]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d053      	beq.n	8000340 <EXTI_Init+0xec>
	{
		tempValue += EXTI_InitStruct->EXTI_Mode;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	789b      	ldrb	r3, [r3, #2]
 800029c:	461a      	mov	r2, r3
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	4413      	add	r3, r2
 80002a2:	60fb      	str	r3, [r7, #12]

		*((_IO uint32_t*)tempValue) |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	6819      	ldr	r1, [r3, #0]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	461a      	mov	r2, r3
 80002ae:	2301      	movs	r3, #1
 80002b0:	fa03 f202 	lsl.w	r2, r3, r2
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	430a      	orrs	r2, r1
 80002b8:	601a      	str	r2, [r3, #0]

		tempValue = (uint32_t)EXTI_BASE_ADDR;
 80002ba:	4b2e      	ldr	r3, [pc, #184]	; (8000374 <EXTI_Init+0x120>)
 80002bc:	60fb      	str	r3, [r7, #12]

		EXTI->RTSR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80002be:	4b2d      	ldr	r3, [pc, #180]	; (8000374 <EXTI_Init+0x120>)
 80002c0:	689a      	ldr	r2, [r3, #8]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	4619      	mov	r1, r3
 80002c8:	2301      	movs	r3, #1
 80002ca:	408b      	lsls	r3, r1
 80002cc:	43db      	mvns	r3, r3
 80002ce:	4929      	ldr	r1, [pc, #164]	; (8000374 <EXTI_Init+0x120>)
 80002d0:	4013      	ands	r3, r2
 80002d2:	608b      	str	r3, [r1, #8]

		EXTI->FTSR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80002d4:	4b27      	ldr	r3, [pc, #156]	; (8000374 <EXTI_Init+0x120>)
 80002d6:	68da      	ldr	r2, [r3, #12]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	4619      	mov	r1, r3
 80002de:	2301      	movs	r3, #1
 80002e0:	408b      	lsls	r3, r1
 80002e2:	43db      	mvns	r3, r3
 80002e4:	4923      	ldr	r1, [pc, #140]	; (8000374 <EXTI_Init+0x120>)
 80002e6:	4013      	ands	r3, r2
 80002e8:	60cb      	str	r3, [r1, #12]

		if(EXTI_InitStruct->TriggerSelection == EXTI_Trigger_RF)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	785b      	ldrb	r3, [r3, #1]
 80002ee:	2b10      	cmp	r3, #16
 80002f0:	d114      	bne.n	800031c <EXTI_Init+0xc8>
		{
			EXTI->RTSR |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80002f2:	4b20      	ldr	r3, [pc, #128]	; (8000374 <EXTI_Init+0x120>)
 80002f4:	689a      	ldr	r2, [r3, #8]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	4619      	mov	r1, r3
 80002fc:	2301      	movs	r3, #1
 80002fe:	408b      	lsls	r3, r1
 8000300:	491c      	ldr	r1, [pc, #112]	; (8000374 <EXTI_Init+0x120>)
 8000302:	4313      	orrs	r3, r2
 8000304:	608b      	str	r3, [r1, #8]
			EXTI->FTSR |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000306:	4b1b      	ldr	r3, [pc, #108]	; (8000374 <EXTI_Init+0x120>)
 8000308:	68da      	ldr	r2, [r3, #12]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	4619      	mov	r1, r3
 8000310:	2301      	movs	r3, #1
 8000312:	408b      	lsls	r3, r1
 8000314:	4917      	ldr	r1, [pc, #92]	; (8000374 <EXTI_Init+0x120>)
 8000316:	4313      	orrs	r3, r2
 8000318:	60cb      	str	r3, [r1, #12]
	{
		tempValue = (uint32_t)EXTI_BASE_ADDR;
		tempValue += EXTI_InitStruct->EXTI_Mode;
		*((_IO uint32_t*)tempValue) &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
	}
}
 800031a:	e024      	b.n	8000366 <EXTI_Init+0x112>
			tempValue += EXTI_InitStruct->TriggerSelection;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	785b      	ldrb	r3, [r3, #1]
 8000320:	461a      	mov	r2, r3
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	4413      	add	r3, r2
 8000326:	60fb      	str	r3, [r7, #12]
			*((_IO uint32_t*)tempValue) |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	6819      	ldr	r1, [r3, #0]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	461a      	mov	r2, r3
 8000332:	2301      	movs	r3, #1
 8000334:	fa03 f202 	lsl.w	r2, r3, r2
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	430a      	orrs	r2, r1
 800033c:	601a      	str	r2, [r3, #0]
}
 800033e:	e012      	b.n	8000366 <EXTI_Init+0x112>
		tempValue = (uint32_t)EXTI_BASE_ADDR;
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <EXTI_Init+0x120>)
 8000342:	60fb      	str	r3, [r7, #12]
		tempValue += EXTI_InitStruct->EXTI_Mode;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	789b      	ldrb	r3, [r3, #2]
 8000348:	461a      	mov	r2, r3
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4413      	add	r3, r2
 800034e:	60fb      	str	r3, [r7, #12]
		*((_IO uint32_t*)tempValue) &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	6819      	ldr	r1, [r3, #0]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	461a      	mov	r2, r3
 800035a:	2301      	movs	r3, #1
 800035c:	4093      	lsls	r3, r2
 800035e:	43da      	mvns	r2, r3
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	400a      	ands	r2, r1
 8000364:	601a      	str	r2, [r3, #0]
}
 8000366:	bf00      	nop
 8000368:	3714      	adds	r7, #20
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40013c00 	.word	0x40013c00

08000378 <NVIC_EnableInterrupt>:
 *
 * @param IRQNumber = IRQ Number of Line
 *
 * @retval Void
 */
void NVIC_EnableInterrupt(IRQNumber_TypeDef_t IRQNumber){
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
	uint32_t tempValue = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]

	tempValue = *((IRQNumber >> 5U) + NVIC_ISER0);
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	095b      	lsrs	r3, r3, #5
 800038a:	b2db      	uxtb	r3, r3
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000392:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0x1U << (IRQNumber & 0x1FU));
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	f003 031f 	and.w	r3, r3, #31
 80003a0:	2201      	movs	r2, #1
 80003a2:	fa02 f303 	lsl.w	r3, r2, r3
 80003a6:	43db      	mvns	r3, r3
 80003a8:	68fa      	ldr	r2, [r7, #12]
 80003aa:	4013      	ands	r3, r2
 80003ac:	60fb      	str	r3, [r7, #12]
	tempValue |= (0x1U << (IRQNumber & 0x1FU));
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	f003 031f 	and.w	r3, r3, #31
 80003b4:	2201      	movs	r2, #1
 80003b6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ba:	68fa      	ldr	r2, [r7, #12]
 80003bc:	4313      	orrs	r3, r2
 80003be:	60fb      	str	r3, [r7, #12]
	*((IRQNumber >> 5U)+ NVIC_ISER0) = tempValue;
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	095b      	lsrs	r3, r3, #5
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80003cc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	601a      	str	r2, [r3, #0]
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <GPIO_Init>:
 * @param GPIO_InitTypeDef_t = User Config Structures
 *
 * @retval Void
 */
void GPIO_Init(GPIO_TypeDef_t *GPIOx, GPIO_InitTypeDef_t* GPIO_ConfigStruct)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b087      	sub	sp, #28
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]

	uint32_t position;
	uint32_t fakePosition = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	613b      	str	r3, [r7, #16]
	uint32_t lastPosition = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]


	for(position = 0; position < 16; position++)
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
 80003f6:	e076      	b.n	80004e6 <GPIO_Init+0x106>
	{
		fakePosition = (0x1 << position);
 80003f8:	2201      	movs	r2, #1
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000400:	613b      	str	r3, [r7, #16]
		lastPosition = (uint32_t)(GPIO_ConfigStruct->pinNumber) & fakePosition;
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	693a      	ldr	r2, [r7, #16]
 8000408:	4013      	ands	r3, r2
 800040a:	60fb      	str	r3, [r7, #12]

		if(fakePosition == lastPosition)
 800040c:	693a      	ldr	r2, [r7, #16]
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	429a      	cmp	r2, r3
 8000412:	d165      	bne.n	80004e0 <GPIO_Init+0x100>
		{
			uint32_t tempValue = GPIOx->MODER;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	60bb      	str	r3, [r7, #8]

			tempValue &= ~(0x3U << (position * 2));
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	2203      	movs	r2, #3
 8000420:	fa02 f303 	lsl.w	r3, r2, r3
 8000424:	43db      	mvns	r3, r3
 8000426:	68ba      	ldr	r2, [r7, #8]
 8000428:	4013      	ands	r3, r2
 800042a:	60bb      	str	r3, [r7, #8]
			tempValue |= (GPIO_ConfigStruct->Mode << (position * 2));
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	685a      	ldr	r2, [r3, #4]
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	fa02 f303 	lsl.w	r3, r2, r3
 8000438:	68ba      	ldr	r2, [r7, #8]
 800043a:	4313      	orrs	r3, r2
 800043c:	60bb      	str	r3, [r7, #8]

			GPIOx->MODER = tempValue;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	68ba      	ldr	r2, [r7, #8]
 8000442:	601a      	str	r2, [r3, #0]

			if(GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT || GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d003      	beq.n	8000454 <GPIO_Init+0x74>
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	2b02      	cmp	r3, #2
 8000452:	d12d      	bne.n	80004b0 <GPIO_Init+0xd0>
			{
				/* 	Output Type CONFIG */
				tempValue = GPIOx->OTYPER;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	685b      	ldr	r3, [r3, #4]
 8000458:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x1U << position);
 800045a:	2201      	movs	r2, #1
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	fa02 f303 	lsl.w	r3, r2, r3
 8000462:	43db      	mvns	r3, r3
 8000464:	68ba      	ldr	r2, [r7, #8]
 8000466:	4013      	ands	r3, r2
 8000468:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct ->Otype << position);
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	689a      	ldr	r2, [r3, #8]
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	fa02 f303 	lsl.w	r3, r2, r3
 8000474:	68ba      	ldr	r2, [r7, #8]
 8000476:	4313      	orrs	r3, r2
 8000478:	60bb      	str	r3, [r7, #8]
				GPIOx->OTYPER = tempValue;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	68ba      	ldr	r2, [r7, #8]
 800047e:	605a      	str	r2, [r3, #4]

				/* 	Output Speed CONFIG */
				tempValue = GPIOx->OSPEEDR;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x3U << position *2 );
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	2203      	movs	r2, #3
 800048c:	fa02 f303 	lsl.w	r3, r2, r3
 8000490:	43db      	mvns	r3, r3
 8000492:	68ba      	ldr	r2, [r7, #8]
 8000494:	4013      	ands	r3, r2
 8000496:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct ->Speed << ( position * 2 ));
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	691a      	ldr	r2, [r3, #16]
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	fa02 f303 	lsl.w	r3, r2, r3
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	60bb      	str	r3, [r7, #8]
				GPIOx->OSPEEDR = tempValue;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	68ba      	ldr	r2, [r7, #8]
 80004ae:	609a      	str	r2, [r3, #8]

			}
			/* 	Push Pull CONFIG */
			tempValue = GPIOx->PUPDR;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3U << position *2 );
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	2203      	movs	r2, #3
 80004bc:	fa02 f303 	lsl.w	r3, r2, r3
 80004c0:	43db      	mvns	r3, r3
 80004c2:	68ba      	ldr	r2, [r7, #8]
 80004c4:	4013      	ands	r3, r2
 80004c6:	60bb      	str	r3, [r7, #8]
			tempValue |= (GPIO_ConfigStruct ->PuPd << ( position * 2 ));
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	68da      	ldr	r2, [r3, #12]
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	68ba      	ldr	r2, [r7, #8]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	60bb      	str	r3, [r7, #8]
			GPIOx->PUPDR = tempValue;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	68ba      	ldr	r2, [r7, #8]
 80004de:	60da      	str	r2, [r3, #12]
	for(position = 0; position < 16; position++)
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	3301      	adds	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	2b0f      	cmp	r3, #15
 80004ea:	d985      	bls.n	80003f8 <GPIO_Init+0x18>

		}

	}

}
 80004ec:	bf00      	nop
 80004ee:	bf00      	nop
 80004f0:	371c      	adds	r7, #28
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <GPIO_WritePin>:
 * @param GPIOx = GPIO_Pin_Set OR GPIO_Pin_Reset
 *
 * @retval Void
 */
void GPIO_WritePin(GPIO_TypeDef_t *GPIOx, uint16_t pinNumber, GPIO_PinState_t pinState)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	460b      	mov	r3, r1
 8000504:	807b      	strh	r3, [r7, #2]
 8000506:	4613      	mov	r3, r2
 8000508:	707b      	strb	r3, [r7, #1]
	if(pinState == GPIO_Pin_Set)
 800050a:	787b      	ldrb	r3, [r7, #1]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d103      	bne.n	8000518 <GPIO_WritePin+0x1e>
	{
		GPIOx->BSRR = pinNumber;
 8000510:	887a      	ldrh	r2, [r7, #2]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	619a      	str	r2, [r3, #24]
	}
	else
	{
		GPIOx->BSRR = (pinNumber << 16U);
	}
}
 8000516:	e004      	b.n	8000522 <GPIO_WritePin+0x28>
		GPIOx->BSRR = (pinNumber << 16U);
 8000518:	887b      	ldrh	r3, [r7, #2]
 800051a:	041b      	lsls	r3, r3, #16
 800051c:	461a      	mov	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	619a      	str	r2, [r3, #24]
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <I2C_PeriphCmd>:
 * @param  stateOfSPI = Enable or Disable
 *
 * @retval Void
 */
void I2C_PeriphCmd(I2C_TypeDef_t *I2Cx, FunctionalState_t stateOfI2C)
{
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	460b      	mov	r3, r1
 8000538:	70fb      	strb	r3, [r7, #3]
	if(stateOfI2C == ENABLE)
 800053a:	78fb      	ldrb	r3, [r7, #3]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d106      	bne.n	800054e <I2C_PeriphCmd+0x20>
	{
		I2Cx->CR1 |= (0x1U << I2C_CR1_PE);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f043 0201 	orr.w	r2, r3, #1
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		I2Cx->CR1 &= ~(0x1U << I2C_CR1_PE);
	}
}
 800054c:	e005      	b.n	800055a <I2C_PeriphCmd+0x2c>
		I2Cx->CR1 &= ~(0x1U << I2C_CR1_PE);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f023 0201 	bic.w	r2, r3, #1
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	601a      	str	r2, [r3, #0]
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <SPI_InterruptHandler>:
	return (SPI_Handle->Instance->SR & SPI_Flag) ? SPI_FLAG_SET : SPI_FLAG_RESET;

}

void SPI_InterruptHandler(SPI_HandleTypeDef_t *SPI_Handle)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b084      	sub	sp, #16
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
	uint8_t interruptSource = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	73fb      	strb	r3, [r7, #15]
	uint8_t interruptFlag = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	73bb      	strb	r3, [r7, #14]

	interruptSource = SPI_Handle->Instance->CR2 & (0x1U << SPI_CR2_TXEIE);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000582:	73fb      	strb	r3, [r7, #15]
	interruptFlag = SPI_Handle->Instance->SR & (0x1U << SPI_SR_TxE);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	b2db      	uxtb	r3, r3
 800058c:	f003 0302 	and.w	r3, r3, #2
 8000590:	73bb      	strb	r3, [r7, #14]

	if((interruptSource != 0) && (interruptFlag != 0 ))
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d006      	beq.n	80005a6 <SPI_InterruptHandler+0x40>
 8000598:	7bbb      	ldrb	r3, [r7, #14]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d003      	beq.n	80005a6 <SPI_InterruptHandler+0x40>
	{
		SPI_Handle->TxISRFunction(SPI_Handle);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	4798      	blx	r3
	}

	interruptSource = SPI_Handle->Instance->CR2 & (0x1U << SPI_CR2_RXNEIE);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005b2:	73fb      	strb	r3, [r7, #15]
	interruptFlag = SPI_Handle->Instance->SR & (0x1U << SPI_SR_RxNE);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	73bb      	strb	r3, [r7, #14]

	if((interruptSource != 0) && (interruptFlag != 0 ))
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d006      	beq.n	80005d6 <SPI_InterruptHandler+0x70>
 80005c8:	7bbb      	ldrb	r3, [r7, #14]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d003      	beq.n	80005d6 <SPI_InterruptHandler+0x70>
	{
		SPI_Handle->RxISRFunction(SPI_Handle);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	4798      	blx	r3
	}

}
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <main>:
SPI_HandleTypeDef_t SPI_Handle;
USART_HandleTypedef_t USART_Handle;
I2C_HandleTypeDef_t I2C_Handle;

int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	GPIO_LedConfig();
 80005e4:	f000 f82a 	bl	800063c <GPIO_LedConfig>
	//GPIO_LockPin(GPIOA, GPIO_PIN_0);
	//LockControl();
	GPIO_ButtonInterruptConfig();
 80005e8:	f000 f878 	bl	80006dc <GPIO_ButtonInterruptConfig>
	//SPI_GPIO_Config();
	//SPI_Config();

	I2C_Handle.Instance = I2C1;
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <main+0x20>)
 80005ee:	4a05      	ldr	r2, [pc, #20]	; (8000604 <main+0x24>)
 80005f0:	601a      	str	r2, [r3, #0]

	I2C_PeriphCmd(I2C_Handle.Instance, ENABLE);
 80005f2:	4b03      	ldr	r3, [pc, #12]	; (8000600 <main+0x20>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2101      	movs	r1, #1
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ff98 	bl	800052e <I2C_PeriphCmd>

	for(;;)
 80005fe:	e7fe      	b.n	80005fe <main+0x1e>
 8000600:	2000005c 	.word	0x2000005c
 8000604:	40005400 	.word	0x40005400

08000608 <EXTI15_10_IRQHandler>:
*/
	}
}

void EXTI15_10_IRQHandler()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	//char messageToSend[] = "HELLO WORD\n";

	if(EXTI->PR & 0x2000)
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <EXTI15_10_IRQHandler+0x2c>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000614:	2b00      	cmp	r3, #0
 8000616:	d00b      	beq.n	8000630 <EXTI15_10_IRQHandler+0x28>
	{

		EXTI->PR |= (0x1U <<13U);
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <EXTI15_10_IRQHandler+0x2c>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	4a05      	ldr	r2, [pc, #20]	; (8000634 <EXTI15_10_IRQHandler+0x2c>)
 800061e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000622:	6153      	str	r3, [r2, #20]

		GPIO_WritePin(GPIOB, GPIO_PIN_ALL, GPIO_Pin_Set);
 8000624:	2201      	movs	r2, #1
 8000626:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800062a:	4803      	ldr	r0, [pc, #12]	; (8000638 <EXTI15_10_IRQHandler+0x30>)
 800062c:	f7ff ff65 	bl	80004fa <GPIO_WritePin>

		//SPI_TransmitData_IT(&SPI_Handle, (uint8_t*)messageToSend, strlen(messageToSend));
	}
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40013c00 	.word	0x40013c00
 8000638:	40020400 	.word	0x40020400

0800063c <GPIO_LedConfig>:
static void GPIO_LedConfig()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef_t GPIO_InitStruct = { 0 };
 8000642:	463b      	mov	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
 8000650:	615a      	str	r2, [r3, #20]

	//RCC_GPIOA_CLK_ENABLE();
	RCC_GPIOB_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
 8000656:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <GPIO_LedConfig+0x94>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a1d      	ldr	r2, [pc, #116]	; (80006d0 <GPIO_LedConfig+0x94>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <GPIO_LedConfig+0x94>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	61fb      	str	r3, [r7, #28]
	RCC_GPIOC_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <GPIO_LedConfig+0x94>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <GPIO_LedConfig+0x94>)
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	6313      	str	r3, [r2, #48]	; 0x30
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <GPIO_LedConfig+0x94>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000680:	f003 0304 	and.w	r3, r3, #4
 8000684:	61bb      	str	r3, [r7, #24]
	//RCC_SYSCFG_CLK_ENABLE();


	GPIO_InitStruct.pinNumber = GPIO_PIN_0 | GPIO_PIN_7;
 8000686:	2381      	movs	r3, #129	; 0x81
 8000688:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT;
 800068a:	2301      	movs	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Otype = GPIO_OTYPE_PP;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.PuPd = GPIO_PUPD_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]

	GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069a:	463b      	mov	r3, r7
 800069c:	4619      	mov	r1, r3
 800069e:	480d      	ldr	r0, [pc, #52]	; (80006d4 <GPIO_LedConfig+0x98>)
 80006a0:	f7ff fe9e 	bl	80003e0 <GPIO_Init>
	memset(&GPIO_InitStruct, 0, sizeof(GPIO_InitStruct));
 80006a4:	463b      	mov	r3, r7
 80006a6:	2218      	movs	r2, #24
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f89a 	bl	80007e4 <memset>

	GPIO_InitStruct.pinNumber = GPIO_PIN_13;
 80006b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.PuPd = GPIO_PUPD_PULLDOWN;
 80006ba:	2302      	movs	r3, #2
 80006bc:	60fb      	str	r3, [r7, #12]

	GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <GPIO_LedConfig+0x9c>)
 80006c4:	f7ff fe8c 	bl	80003e0 <GPIO_Init>

	//EXTI_LineConfig(EXTI_PortSource_GPIOC, EXTI_LineSource_7);
}
 80006c8:	bf00      	nop
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020400 	.word	0x40020400
 80006d8:	40020800 	.word	0x40020800

080006dc <GPIO_ButtonInterruptConfig>:
	GPIO_Init(GPIOA, &GPIO_InitStruct);
}


static void GPIO_ButtonInterruptConfig()
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
	//RCC_GPIOA_CLK_ENABLE();
	EXTI_InitTypeDef_t EXTI_InitStruct = {0};
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]

	RCC_SYSCFG_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <GPIO_ButtonInterruptConfig+0x54>)
 80006ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ee:	4a10      	ldr	r2, [pc, #64]	; (8000730 <GPIO_ButtonInterruptConfig+0x54>)
 80006f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f4:	6453      	str	r3, [r2, #68]	; 0x44
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <GPIO_ButtonInterruptConfig+0x54>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fe:	607b      	str	r3, [r7, #4]
	EXTI_LineConfig(EXTI_PortSource_GPIOC, EXTI_LineSource_13);
 8000700:	210d      	movs	r1, #13
 8000702:	2002      	movs	r0, #2
 8000704:	f7ff fd72 	bl	80001ec <EXTI_LineConfig>

	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8000708:	2301      	movs	r3, #1
 800070a:	70fb      	strb	r3, [r7, #3]
	EXTI_InitStruct.EXTI_LineNumber = EXTI_LineSource_13;
 800070c:	230d      	movs	r3, #13
 800070e:	703b      	strb	r3, [r7, #0]
	EXTI_InitStruct.EXTI_Mode = EXTI_MODE_Interrupt;
 8000710:	2300      	movs	r3, #0
 8000712:	70bb      	strb	r3, [r7, #2]
	EXTI_InitStruct.TriggerSelection = EXTI_Trigger_Rising;
 8000714:	2308      	movs	r3, #8
 8000716:	707b      	strb	r3, [r7, #1]

	EXTI_Init(&EXTI_InitStruct);
 8000718:	463b      	mov	r3, r7
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fd9a 	bl	8000254 <EXTI_Init>

	NVIC_EnableInterrupt(EXTI15_10_IRQNumber);
 8000720:	2028      	movs	r0, #40	; 0x28
 8000722:	f7ff fe29 	bl	8000378 <NVIC_EnableInterrupt>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800

08000734 <SPI1_IRQHandler>:
	GPIO_Init(GPIOA, &GPIO_InitStruct);

}

void SPI1_IRQHandler()
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	SPI_InterruptHandler(&SPI_Handle);
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <SPI1_IRQHandler+0x10>)
 800073a:	f7ff ff14 	bl	8000566 <SPI_InterruptHandler>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000001c 	.word	0x2000001c

08000748 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800074a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800074c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <LoopForever+0x6>)
  ldr r1, =_edata
 8000752:	490d      	ldr	r1, [pc, #52]	; (8000788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <LoopForever+0xe>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000768:	4c0a      	ldr	r4, [pc, #40]	; (8000794 <LoopForever+0x16>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000776:	f000 f811 	bl	800079c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077a:	f7ff ff31 	bl	80005e0 <main>

0800077e <LoopForever>:

LoopForever:
  b LoopForever
 800077e:	e7fe      	b.n	800077e <LoopForever>
  ldr   r0, =_estack
 8000780:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800078c:	08000814 	.word	0x08000814
  ldr r2, =_sbss
 8000790:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000794:	20000078 	.word	0x20000078

08000798 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC_IRQHandler>
	...

0800079c <__libc_init_array>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	4d0d      	ldr	r5, [pc, #52]	; (80007d4 <__libc_init_array+0x38>)
 80007a0:	4c0d      	ldr	r4, [pc, #52]	; (80007d8 <__libc_init_array+0x3c>)
 80007a2:	1b64      	subs	r4, r4, r5
 80007a4:	10a4      	asrs	r4, r4, #2
 80007a6:	2600      	movs	r6, #0
 80007a8:	42a6      	cmp	r6, r4
 80007aa:	d109      	bne.n	80007c0 <__libc_init_array+0x24>
 80007ac:	4d0b      	ldr	r5, [pc, #44]	; (80007dc <__libc_init_array+0x40>)
 80007ae:	4c0c      	ldr	r4, [pc, #48]	; (80007e0 <__libc_init_array+0x44>)
 80007b0:	f000 f820 	bl	80007f4 <_init>
 80007b4:	1b64      	subs	r4, r4, r5
 80007b6:	10a4      	asrs	r4, r4, #2
 80007b8:	2600      	movs	r6, #0
 80007ba:	42a6      	cmp	r6, r4
 80007bc:	d105      	bne.n	80007ca <__libc_init_array+0x2e>
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c4:	4798      	blx	r3
 80007c6:	3601      	adds	r6, #1
 80007c8:	e7ee      	b.n	80007a8 <__libc_init_array+0xc>
 80007ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ce:	4798      	blx	r3
 80007d0:	3601      	adds	r6, #1
 80007d2:	e7f2      	b.n	80007ba <__libc_init_array+0x1e>
 80007d4:	0800080c 	.word	0x0800080c
 80007d8:	0800080c 	.word	0x0800080c
 80007dc:	0800080c 	.word	0x0800080c
 80007e0:	08000810 	.word	0x08000810

080007e4 <memset>:
 80007e4:	4402      	add	r2, r0
 80007e6:	4603      	mov	r3, r0
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d100      	bne.n	80007ee <memset+0xa>
 80007ec:	4770      	bx	lr
 80007ee:	f803 1b01 	strb.w	r1, [r3], #1
 80007f2:	e7f9      	b.n	80007e8 <memset+0x4>

080007f4 <_init>:
 80007f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007f6:	bf00      	nop
 80007f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007fa:	bc08      	pop	{r3}
 80007fc:	469e      	mov	lr, r3
 80007fe:	4770      	bx	lr

08000800 <_fini>:
 8000800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000802:	bf00      	nop
 8000804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000806:	bc08      	pop	{r3}
 8000808:	469e      	mov	lr, r3
 800080a:	4770      	bx	lr
